var J=Object.defineProperty;var Z=(u,e,t)=>e in u?J(u,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[e]=t;var L=(u,e,t)=>(Z(u,typeof e!="symbol"?e+"":e,t),t);import{S as ee,T as B,O as m,M as v,B as N,P as te,a as F,D as se,b as E,G as D,A as p,c as _,d as ae,e as H,f as re,g as V,h as ie,i as oe,V as q,Q as K,j as $,E as ne,k as le,l as y,m as ue,n as ce,o as Q,W as he,p as de,q as fe,r as me,R as pe,s as _e,C as xe,t as ge,u as be,v as ve}from"./t3d-8b6d2ae7.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const we={name:"solar-system",stars:[{name:"sun",color:16755500,texture:"./sun-moon-stars/2k_sun.jpg",size:24,radius:695700,rotation:{period:27}}],planets:[{name:"mercury",color:6250335,texture:"./planets/2k_mercury.jpg",size:1.5,radius:2439.7,revolution:{period:87.97,radius:.38},rotation:{period:58.646,axis:0}},{name:"venus",color:15517060,texture:"./planets/2k_venus_atmosphere.jpg",size:3.72,radius:6051.8,revolution:{period:224.7,radius:.72},rotation:{period:243,axis:177.3}},{name:"earth",color:1981301,texture:"./earth/2k_earth_daymap.jpg",size:3.92,radius:6371,revolution:{period:365.24,radius:1},rotation:{period:.99726968,axis:23.4}},{name:"mars",color:15560768,texture:"./planets/2k_mars.jpg",size:2.9,radius:3389.5,revolution:{period:686.93,radius:1.52},rotation:{period:1.026,axis:25.2}},{name:"jupiter",color:12554338,texture:"./planets/2k_jupiter.jpg",size:12,radius:69911,revolution:{period:11.8565*365,radius:5.2},rotation:{period:.41354,axis:3.1}},{name:"saturn",color:16243887,texture:"./planets/2k_saturn.jpg",size:10.8,radius:58232,ring:"./planets/2k_saturn_ring_alpha.png",revolution:{period:29.448*365,radius:9.54},rotation:{period:.44401,axis:26.7}},{name:"uranus",color:11131874,texture:"./planets/2k_uranus.jpg",size:4.68,radius:25362,revolution:{period:84.02*365,radius:19.2},rotation:{period:.718,axis:97.8}},{name:"neptune",color:3758779,texture:"./planets/2k_neptune.jpg",size:4.9,radius:24622,revolution:{period:164.79*365,radius:30.05},rotation:{period:.67125,axis:28.3}}],belts:[{name:"main belt",model:"./asteroid.glb",emissive:65793,count:800,radius:[2.17,3.64],scale:[1.9,.1],height:10},{name:"kuiper belt",model:"./asteroid.glb",emissive:526344,count:1500,radius:[30.1,50.3],scale:[2,2],height:50}]},Y=new ee(1,64,32);class f{static scaleRevolutionSpeed(e){return e*this.revolution.speedScale}static scaleRotationSpeed(e){return e*this.rotation.speedScale}static scaleRevolutionRadius(e){return e*this.revolution.radius.scale+this.revolution.radius.offset}static scaleStarRadius(e){return e/2}static scalePlanetRadius(e){return e/2}}L(f,"revolution",{speedScale:10,radius:{scale:24,offset:22}}),L(f,"rotation",{speedScale:.3});class Se extends m{constructor(e){const{name:t,color:r,texture:s,size:i,rotation:n}=e,o=new v(Y,new N);o.name=t+"-mesh";const l=f.scaleStarRadius(i)*2;o.scale.set(l,l,l),o.material.diffuse.setHex(r),Pe.loadAsync(s).then(c=>{o.material.diffuse.setHex(16777215),o.material.diffuseMap=c,o.material.needsUpdate=!0});const a=new te(16777215,1);a.name=t+"-light",a.distance=1229,a.decay=.4,super(),this.name=t,this.add(o),this.add(a),this._rotationSpeed=2*Math.PI/n.period}update(e){this.euler.y+=f.scaleRotationSpeed(this._rotationSpeed)*e}}const Pe=new B;class Me extends v{constructor(e){const{name:t,size:r,ring:s}=e,i=f.scalePlanetRadius(r)*2,n=new ye(i*1.1,i*2),o=new F;o.metalness=.3,o.roughness=.7,o.emissive.setRGB(.01,.01,.01),o.transparent=!0,o.side=se.DOUBLE,o.diffuseMap=Re.load(s),o.diffuseMap.encoding=E.SRGB,super(n,o),this.name=t+"-ring"}}const Re=new B;class ye extends D{constructor(e,t,r=64){super();const s=[],i=[],n=[],o=[],l=2*Math.PI/r;for(let a=0;a<=r;a++){const c=a*l,h=Math.cos(c),d=Math.sin(c);s.push(h*e,0,d*e),s.push(h*t,0,d*t),i.push(0,a/r),i.push(1,a/r),n.push(0,1,0),n.push(0,1,0),a<r&&(o.push(a*2,a*2+2,a*2+1),o.push(a*2+1,a*2+2,a*2+3))}this.addAttribute("a_Position",new p(new _(new Float32Array(s),3))),this.addAttribute("a_Uv",new p(new _(new Float32Array(i),2))),this.addAttribute("a_Normal",new p(new _(new Float32Array(n),3))),this.setIndex(new p(new _(new Uint16Array(o),1))),this.computeBoundingBox(),this.computeBoundingSphere()}}class Ce extends m{constructor(e){const{name:t,color:r,texture:s,size:i,ring:n,revolution:o,rotation:l}=e,a=new v(Y,new F);a.name=t+"-mesh";const c=f.scalePlanetRadius(i)*2;a.scale.set(c,c,c),a.material.metalness=.2,a.material.roughness=.8,a.material.diffuse.setHex(r),Te.loadAsync(s).then(h=>{a.material.diffuse.setHex(16777215),a.material.diffuseMap=h,a.material.diffuseMap.encoding=E.SRGB,a.material.needsUpdate=!0}),super(),this.name=t,this.add(a),this._mesh=a,n&&this.add(new Me(e)),this._revolutionSpeed=2*Math.PI/o.period,this._revolutionSperical=new ae,this._revolutionSperical.phi=Math.PI/2,this._revolutionSperical.theta=Math.random()*2*Math.PI,this._revolutionSperical.radius=f.scaleRevolutionRadius(o.radius),this.euler.z=l.axis/180*Math.PI,this._rotationSpeed=2*Math.PI/l.period}update(e){this._revolutionSperical.theta+=f.scaleRevolutionSpeed(this._revolutionSpeed)*e,this._revolutionSperical.theta=this._revolutionSperical.theta%(2*Math.PI),this.position.setFromSpherical(this._revolutionSperical),this._mesh.euler.y+=f.scaleRotationSpeed(this._rotationSpeed)*e}showRotationAxis(){let e=this.getObjectByName("axis");if(!e){const t=new D,r=this._mesh.scale.x*3/2,s=new Float32Array([0,r,0,0,-r,0]);t.addAttribute("a_Position",new p(new _(s,3))),t.computeBoundingBox(),t.computeBoundingSphere(),e=new v(t,new N),e.name="axis",e.material.drawMode=H.LINES,e.material.diffuse.setRGB(.1,.1,.1),this.add(e)}e.visible=!0}hideRotationAxis(){const e=this.getObjectByName("axis");e&&(e.visible=!1)}}const Te=new B;class Be extends v{constructor(e){const{name:t,revolution:r}=e,s=new N;s.diffuse.setHex(526344),s.drawMode=H.LINE_STRIP,super(Ae,s);const i=f.scaleRevolutionRadius(r.radius);this.scale.set(i,1,i),this.name=t+"-orbit"}}class Ee extends D{constructor(e,t=128){super();const r=[],s=2*Math.PI/t;for(let i=0;i<=t;i++){const n=i*s,o=Math.cos(n),l=Math.sin(n);r.push(e*o,0,e*l)}this.addAttribute("a_Position",new p(new _(new Float32Array(r),3))),this.computeBoundingBox(),this.computeBoundingSphere()}}const Ae=new Ee(1);class Ie extends F{constructor(e){super(),this.type=re.SHADER,e&&this.copy(e),this.shaderName="InstancedPBR",this.vertexShader=x,this.fragmentShader=V.pbr_frag,this.defines.USE_INSTANCING=!0,this.uniforms.instanceOffset=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}}const ze=`
    #ifdef USE_INSTANCING
        attribute mat4 instanceMatrix;
        uniform mat4 instanceOffset;
    #endif
`,Le=`
    #ifdef USE_INSTANCING
        mat4 localInstanceMatrix = inverseMat4(instanceOffset) * instanceMatrix * instanceOffset;
        transformed = (localInstanceMatrix * vec4(transformed, 1.0)).xyz;
    #endif
`,Ne=`
    #ifdef USE_INSTANCING
        #ifdef USE_INSTANCING
            objectNormal = (transposeMat4(inverseMat4(localInstanceMatrix)) * vec4(objectNormal, 0.0)).xyz;
        #endif

        #ifdef USE_TANGENT
            objectTangent = (transposeMat4(inverseMat4(localInstanceMatrix)) * vec4(objectTangent, 0.0)).xyz;
        #endif
    #endif
`;let x=V.pbr_vert;x=x.replace("#include <logdepthbuf_pars_vert>",`
    #include <logdepthbuf_pars_vert>
    ${ze}
`);x=x.replace("#include <pvm_vert>",`
    ${Le}
    #include <pvm_vert>
`);x=x.replace("#include <normal_vert>",`
    ${Ne}
    #include <normal_vert>
`);class Fe extends m{constructor(e){super(),this.name="asteroid-belt";const t=f.scaleRevolutionRadius(e.radius[0]),r=f.scaleRevolutionRadius(e.radius[1]),s=e.height,i=r-t,n=s/2;De.load(e.model).then(o=>{const{root:l}=o;l.children[0].material.emissive.setHex(e.emissive);const a=new Ie(l.children[0].material),c=[];for(let g=0;g<e.count;g++){const R=Math.random(),w=i*R+t,I=(Math.random()>.5?1:-1)*(Math.cos((R-.5)*Math.PI)*s+Math.random()*s-n),G=Math.random()*Math.PI*2;C.x=w*Math.cos(G),C.z=w*Math.sin(G),C.y=I*Math.random(),b.x=Math.random()*2-1,b.y=Math.random()*2-1,b.z=Math.random()*2-1,b.w=Math.random()*2-1,b.normalize();const z=Math.random()*e.scale[0]+e.scale[1];T.x=(Math.random()*.5+.5)*z,T.y=(Math.random()*.5+.5)*z,T.z=(Math.random()*.5+.5)*z,S.transform(C,T,b),S.toArray(c,g*16)}const h=l.children[0].geometry.clone(),d=new _(new Float32Array(c),16);d.usage=oe.DYNAMIC_DRAW;const P=new p(d);P.divisor=1,h.addAttribute("instanceMatrix",P),h.instanceCount=e.count;const M=new v(h,a);this.add(M)}).catch(o=>{console.error(o)})}update(e){const t=this.children[0];if(t){const r=t.geometry.getAttribute("instanceMatrix");O.y=e,j.setFromEuler(O),j.toMatrix4(W);for(let s=0,i=r.buffer.count;s<i;s++){const n=s*16;S.fromArray(r.buffer.array,n),S.multiply(W),S.toArray(r.buffer.array,n)}r.buffer.version++}this.euler.y+=e/20}}const De=new ie,C=new q,T=new q,b=new K,S=new $,O=new ne,j=new K,W=new $;class Ue extends m{constructor(e){super(),this.name=e.name,this.starsContainer=new m,this.starsContainer.name=e.name+"-stars-container",this.add(this.starsContainer),this.planetsContainer=new m,this.planetsContainer.name=e.name+"-planets-container",this.add(this.planetsContainer),this.orbitsContainer=new m,this.orbitsContainer.name=e.name+"-orbits-container",this.add(this.orbitsContainer),this.beltsContainer=new m,this.beltsContainer.name=e.name+"-belts-container",this.add(this.beltsContainer),e.stars.forEach(t=>{this.starsContainer.add(new Se(t))}),e.planets.forEach(t=>{this.planetsContainer.add(new Ce(t)),this.orbitsContainer.add(new Be(t))}),e.belts.forEach(t=>{this.beltsContainer.add(new Fe(t))}),console.log(this)}update(e){this.starsContainer.children.forEach(t=>{t.update(e)}),this.planetsContainer.children.forEach(t=>{t.update(e)}),this.beltsContainer.children.forEach(t=>{t.update(e)})}}class Ge extends le{constructor(){super(),this.threshold=0,this.smoothWidth=.1,this.strength=1,this.radius=0,this._highlightPass=new y(ue),this._separableBlurPasses=[];for(let e=0;e<5;e++){const t=k[e],r=new y(Oe);r.material.defines.KERNEL_RADIUS=t;for(let s=0;s<t;s++)r.uniforms.gaussianCoefficients.push(.39894*Math.exp(-.5*s*s/(t*t))/t);this._separableBlurPasses.push(r)}this._compositePass=new y(je),this._blendPass=new y(ce),this._blendPass.material.premultipliedAlpha=!0,this._tempRTList=[]}render(e,t,r,s,i){const n=t._renderTargetCache.allocate(0),o=t._renderTargetCache.allocate(1);e.setRenderTarget(n),e.setClearColor(0,0,0,0),e.clear(!0,!0,!1),this._highlightPass.uniforms.tDiffuse=r.texture,this._highlightPass.uniforms.threshold=this.threshold,this._highlightPass.uniforms.smoothWidth=this.smoothWidth,this._highlightPass.render(e);let l=n;for(let a=0;a<k.length;a++){const c=t._renderTargetCache.allocate(a+1);e.setRenderTarget(c),e.setClearColor(0,0,0,0),e.clear(!0,!0,!1),this._separableBlurPasses[a].uniforms.tDiffuse=l.texture,this._separableBlurPasses[a].uniforms.invSize[0]=1/l.width,this._separableBlurPasses[a].uniforms.invSize[1]=1/l.height,this._separableBlurPasses[a].uniforms.direction[0]=1,this._separableBlurPasses[a].uniforms.direction[1]=0,this._separableBlurPasses[a].render(e);const h=t._renderTargetCache.allocate(a+1);e.setRenderTarget(h),e.setClearColor(0,0,0,0),e.clear(!0,!0,!1),this._separableBlurPasses[a].uniforms.tDiffuse=c.texture,this._separableBlurPasses[a].uniforms.invSize[0]=1/l.width,this._separableBlurPasses[a].uniforms.invSize[1]=1/l.height,this._separableBlurPasses[a].uniforms.direction[0]=0,this._separableBlurPasses[a].uniforms.direction[1]=1,this._separableBlurPasses[a].render(e),t._renderTargetCache.release(c,a+1),l=h,this._tempRTList[a]=h}e.setRenderTarget(o),e.setClearColor(0,0,0,0),e.clear(!0,!0,!1),this._compositePass.uniforms.blurTexture1=this._tempRTList[0].texture,this._compositePass.uniforms.blurTexture2=this._tempRTList[1].texture,this._compositePass.uniforms.blurTexture3=this._tempRTList[2].texture,this._compositePass.uniforms.blurTexture4=this._tempRTList[3].texture,this._compositePass.uniforms.blurTexture5=this._tempRTList[4].texture,this._compositePass.uniforms.bloomRadius=this.radius,this._compositePass.uniforms.bloomStrength=this.strength,this._compositePass.render(e),e.setRenderTarget(s),e.setClearColor(0,0,0,0),i?e.clear(t.clearColor,t.clearDepth,t.clearStencil):e.clear(!0,!0,!1),this._blendPass.uniforms.texture1=r.texture,this._blendPass.uniforms.texture2=o.texture,this._blendPass.uniforms.colorWeight1=1,this._blendPass.uniforms.alphaWeight1=1,this._blendPass.uniforms.colorWeight2=1,this._blendPass.uniforms.alphaWeight2=0,i&&(this._blendPass.material.transparent=t._tempClearColor[3]<1||!t.clearColor,this._blendPass.renderStates.camera.rect.fromArray(t._tempViewport)),this._blendPass.render(e),i&&(this._blendPass.material.transparent=!1,this._blendPass.renderStates.camera.rect.set(0,0,1,1)),t._renderTargetCache.release(n,0),t._renderTargetCache.release(o,1),this._tempRTList.forEach((a,c)=>t._renderTargetCache.release(a,c+1))}resize(e,t){let r=Math.round(e/2),s=Math.round(t/2);for(let i=0;i<5;i++)this._separableBlurPasses[i].uniforms.invSize=[1/r,1/s],r=Math.round(r/2),s=Math.round(s/2)}dispose(){this._highlightPass.dispose(),this._compositePass.dispose(),this._blendPass.dispose();for(let e=0;e<5;e++)this._separableBlurPasses[e].dispose()}}const k=[3,5,7,9,11],Oe={name:"ec_unrealbloom_blur",defines:{KERNEL_RADIUS:5},uniforms:{tDiffuse:null,invSize:[1/512,1/512],direction:[.5,.5],gaussianCoefficients:[]},vertexShader:Q,fragmentShader:`
		uniform sampler2D tDiffuse;
		uniform vec2 invSize;
		uniform vec2 direction;
		uniform float gaussianCoefficients[KERNEL_RADIUS];
		varying vec2 v_Uv;
		void main() {
			float weightSum = gaussianCoefficients[0];
			vec3 diffuseSum = texture2D(tDiffuse, v_Uv).rgb * weightSum;
			for(int i = 1; i < KERNEL_RADIUS; i++) {
				float x = float(i);
				float w = gaussianCoefficients[i];
				vec2 uvOffset = direction * invSize * x;
				vec3 sample1 = texture2D(tDiffuse, v_Uv + uvOffset).rgb;
				vec3 sample2 = texture2D(tDiffuse, v_Uv - uvOffset).rgb;
				diffuseSum += (sample1 + sample2) * w;
				weightSum += 2.0 * w;
			}
			gl_FragColor = vec4(diffuseSum / weightSum, 0.0);
		}
	`},je={name:"ec_unrealbloom_composite",defines:{},uniforms:{blurTexture1:null,blurTexture2:null,blurTexture3:null,blurTexture4:null,blurTexture5:null,bloomFactors:[1,.8,.6,.4,.2],bloomRadius:0,bloomStrength:1},vertexShader:Q,fragmentShader:`
		uniform sampler2D blurTexture1;
		uniform sampler2D blurTexture2;
		uniform sampler2D blurTexture3;
		uniform sampler2D blurTexture4;
		uniform sampler2D blurTexture5;
		uniform float bloomStrength;
		uniform float bloomRadius;
		uniform float bloomFactors[5];

		varying vec2 v_Uv;

		float lerpBloomFactor(const in float factor) {
			float mirrorFactor = 1.2 - factor;
			return mix(factor, mirrorFactor, bloomRadius);
		}

		void main() {
			float factor0 = lerpBloomFactor(bloomFactors[0]);
			float factor1 = lerpBloomFactor(bloomFactors[1]);
			float factor2 = lerpBloomFactor(bloomFactors[2]);
			float factor3 = lerpBloomFactor(bloomFactors[3]);
			float factor4 = lerpBloomFactor(bloomFactors[4]);
			gl_FragColor = bloomStrength * (factor0 * texture2D(blurTexture1, v_Uv) +
				factor1 * texture2D(blurTexture2, v_Uv) +
				factor2 * texture2D(blurTexture3, v_Uv) +
				factor3 * texture2D(blurTexture4, v_Uv) +
				factor4 * texture2D(blurTexture5, v_Uv));
		}
	`};class We{constructor(){const e=window.devicePixelRatio;let t=window.innerWidth||2,r=window.innerHeight||2;const s=document.createElement("canvas");s.width=Math.floor(t*e),s.height=Math.floor(r*e),s.style.width=t+"px",s.style.height=r+"px",document.body.appendChild(s);const i=s.getContext("webgl2",{antialias:!0,alpha:!1}),n=new he(i),o=new de(t,r,{webgl2:!0,highDynamicRange:!0,samplerNumber:Math.min(n.capabilities.maxSamples,5),floatColorBuffer:!!n.capabilities.getExtension("EXT_color_buffer_float")});o.sceneMSAA=!0;const l=new Ge;l.strength=.3,l.threshold=.3,l.radius=.1,l.smoothWidth=.1,o.addEffect("Bloom",l,100);const a=new fe;a.toneMapping=me.ACESFilmic,a.toneMappingExposure=1,a.outputColorSpace=E.SRGB,o.addEffect("ToneMapping",a,199);const c=new pe(s),h=new _e,d=new xe;d.position.set(0,100,500),d.setPerspective(45/180*Math.PI,t/r,10,1e4),h.add(d);const P=new ge(d,s);let M=0;const g=w=>{requestAnimationFrame(g);const I=w-M;M=w,this._loop(I/1e3),P.update(),h.updateMatrix(),h.updateRenderStates(d),h.updateRenderQueue(d),n.setClearColor(0,0,0,1),o.render(n,h,d,c)};requestAnimationFrame(g);function R(){t=window.innerWidth||2,r=window.innerHeight||2,d.setPerspective(45/180*Math.PI,t/r,10,1e4),c.resize(Math.floor(t*e),Math.floor(r*e)),o.resize(t,r),s.style.width=t+"px",s.style.height=r+"px"}window.addEventListener("resize",R,!1),this._scene=h,this._loop=function(){}}get scene(){return this._scene}set loop(e){this._loop=e}}const A=new We,U=new be;U.texture=new B().load("./sun-moon-stars/2k_stars_milky_way.jpg");U.texture.encoding=E.SRGB;A.scene.add(U);const ke=new ve(16777215,.12);A.scene.add(ke);const X=new Ue(we);A.scene.add(X);A.loop=function(u){X.update(u)};
